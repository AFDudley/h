[app:main]
use: egg:h

# API configuration
#
# Customize the key or leave it as the default. If the key is present without
# a secret, initializes the consumer in the API consumer table with a random
# secret.
#
# Set `api.endpoint`, `api.url`, or both. With `api.endpoint` as a path,
# configures an embedded annotator-store on that path. With `api.url`,
# urls can be generated with an alternate domain. With `api.url` but  without
# `api.endpoint`, the storage can be delegated to a remote API server.
#
# If you embed the api with `api.endpoint` and use `api.url` to address route
# requests to this server through a different domain and path, tell pyramid
# that the api has a virtual root by ensuring the `X-Vhm-Root` HTTP header is
# passed with the value `/@@api_virtual` on requests to the API domain.
#
# Note: Using `api.url` without `api.endpoint` is not currently supported.
#
# Example:
#    api.endpoint: /api
#    api.url: https://api.example.com
#    api.key: fdf077b5-c210-4744-b1e2-db4c577d195e
#    api.secret: fb8557f0-34ba-462e-92af-54620a1d87c7
api.endpoint: /api
api.key: 00000000-0000-0000-0000-000000000000

# Authentication settings
# Add subsections for each provider included with the multiauth setting below.
# The local annotator API is handled by the api section above.
#auth.local.authorization: /oauth/authorize
#auth.local.token: /oauth/token

# ElasticSearch configuration
#es.host: http://localhost:9200
#es.index: annotator

# User and group framework settings -- see horus documentation
# Used by the local authentication provider
horus.login_redirect: stream
horus.logout_redirect: login
horus.activate_redirect: login

#horus.autologin: False
#horus.allow_email_auth: False
#horus.require_activation: True

# Authorization settings -- see pyramid_multiauth documentation
multiauth.policies: h.auth.local h.api

# Mail server configuration -- see the pyramid_mailer documentation
mail.default_sender: "Annotation Daemon" <no-reply@localhost>
#mail.host: localhost
#mail.port: 25

# Include any deployment-specific pyramid add-ons here
pyramid.includes:
    pyramid_exclog
    pyramid_mailer
    pyramid_redis_sessions

# Redis session configuration -- See pyramid_redis_sessions documentation
# The session secret must be set by providing a 128 character long secrete here
# or in the SESSION_SECRET environment variable. Without this, the application
# will not start.
#redis.sessions.secret:
redis.sessions.cookie_max_age: 2592000
redis.sessions.timeout: 604800

# SQLAlchemy configuration -- See SQLAlchemy documentation
sqlalchemy.url: sqlite:///h.db

# Static asset configuration -- see webassets documentation
# Until the next pyramid_webassets, don't change these.
# Example:
#   webassets.base_dir: /srv/www/static
#   webassets.base_url: https://static.example.com
webassets.base_dir: h:static
webassets.base_url: assets
webassets.cache_max_age: 86400
webassets.coffee_no_bare: True
webassets.static_view: True
webassets.uglifyjs_bin: %(here)s/node_modules/.bin/uglifyjs
webassets.cleancss_bin: %(here)s/node_modules/.bin/cleancss
webassets.coffee_bin: %(here)s/node_modules/.bin/coffee

exclog.extra_info: True

[server:main]
use: egg:gunicorn
worker_class: gevent


[loggers]
keys = root, gunicorn.error, alembic, exc_logger


[handlers]
keys = console, exc_handler


[formatters]
keys = generic, exc_formatter


[logger_root]
handlers = console


[logger_gunicorn.error]
handlers =
qualname = gunicorn.error


[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_exc_logger]
level = ERROR
handlers = exc_handler
qualname = exc_logger


[handler_console]
class = StreamHandler
args = ()
formatter = generic

[handler_exc_handler]
class = handlers.SMTPHandler
args = (('localhost', 25), 'errors@hypothes.is', ['aron@hypothes.is'], '[h] Exception')
level = ERROR
formatter = exc_formatter


[formatter_generic]
format = %(asctime)s [%(process)d] [%(levelname)s] %(message)s

[formatter_exc_formatter]
format = %(asctime)s %(message)s
